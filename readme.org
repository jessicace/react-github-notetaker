* About
  This is my following of the [[https://egghead.io/series/build-your-first-react-js-application][Build Your First React.js App]]
  course. I've varied the order of some things and expanded where I
  felt it was appropriate.
* Up and Running with React and Webpack
** Initialisation / Install dependencies 
  1. Initialise our package.json file. Go through the interactive
     steps, or just hit enter to accept the defaults.
     #+BEGIN_SRC sh
     npm init
     #+END_SRC
  2. Install React.
     #+BEGIN_SRC sh
     npm install --save react@0.14.3
     #+END_SRC
  3. Install react-dom. ReactDOM is used for rendering, including
     server side rendering.
     #+BEGIN_SRC sh
     npm install --save react-dom@0.14.3
     #+END_SRC
  4. Install Babel packages as dev dependencies. Babel is a JavaScript
     compiler. Babel compiles the code to something the browser can read.
     #+BEGIN_SRC sh
     npm install --save-dev babel-core@6.3.13
     #+END_SRC
  5. Install React babel preset. It contains plugins for transforming
     jsx.
     #+BEGIN_SRC sh
     npm install --save-dev babel-preset-react@6.3.13
     #+END_SRC
  6. Install ES2015 babel preset. This preset contains various babel
     plugins for transforming your ES2015 code.
     #+BEGIN_SRC sh
     npm install --save-dev babel-preset-es2015@6.3.13
     #+END_SRC
  7. Install webpack.
     #+BEGIN_SRC sh
     npm install webpack --save-dev
     #+END_SRC
  8. Install babel-loader. Babel-Loader is a webpack plugin.
     #+BEGIN_SRC sh
     npm install --save-dev babel-loader@6.2.0
     #+END_SRC
** Entry point to our application
  1. Create public/index.html. This will contain the root view of our
     application. We are referencing bundle.js - this will contain our
     transpiled JavaScript.
     #+BEGIN_SRC html
       <!-- public/index.html -->
       <!DOCTYPE html>
       <html lang="en">
         <head>
           <meta charset="UTF-8">
           <title>React Github Notetaker</title>
           <link rel="stylesheet"
                 type="text/css"
                 href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
         </head>
         <body>
           <div id="app"></div>
           <script src="bundle.js"></script>
         </body>
       </html>
     #+END_SRC
** Webpack Configuration
  1. Create webpack.config.js. Here, we are exporting an object with our
     webpack configuration. 
     #+BEGIN_SRC js
     // webpack.config.js
     module.exports = {
      
     }
     #+END_SRC
  2. We need to tell webpack where our root component is. It needs
     this to tell webpack where to start processing our JSX. There
     is always one root component. Webpack will take this
     component and run it through the transformations specified in
     the loader. 
     #+BEGIN_SRC js
       // webpack.config.js
       module.exports = {
         entry: "./app/components/Main.js"
       }
     #+END_SRC
  3. Once webpack is done transpiling, this tells it where to
     place the output.
     #+BEGIN_SRC js
       // webpack.config.js
       module.exports = {
         entry: "./app/components/Main.js",
         output: {
           filename: "public/bundle.js"
         }
       }
     #+END_SRC
  4. Add our loaders. We are using the babel-loader we installed
     earlier. We don't want to transform anything within
     the node_modules folder (or bower_components if you're one of
     those people). Within the query property, we're telling
     babel what transformations we would like done to our
     code. We're using the babel-preset-react that we installed
     earlier to transform our JSX. We also want to use
     babel-preset-es2015 so we can write ES2015 code but still
     have the browser understand us.
     #+BEGIN_SRC js
       // webpack.config.js
       module.exports = {
         entry: "./app/components/Main.js",
         output: {
           filename: "public/bundle.js"
         },
         module: {
           loaders: [
             {
               test: /\.jsx$/,
               exclude: /(node_modules|bower_components)/,
               loader: 'babel',
               query: {
                 presets: [
                   'react', 
                   'es2015'
                 ]
               }
             }
           ]
         }
       }
     #+END_SRC
** Create our first component
  1. Create app/components/Main.js file, which contains our root
     component. 
     #+BEGIN_SRC js
       // app/components/Main.js
       var React = require('react');

       var Main = React.createClass({

       });
     #+END_SRC
  2. Add the render method. Render specifies what the UI looks
     like for this specific element.
     #+BEGIN_SRC js
       // app/components/Main.js
       var React = require('react');

       var Main = React.createClass({
         render: function() {
           return (
             <div>
               Hello World!
             </div>
           )
         }
       });
     #+END_SRC
  3. Render the component. In this instance, we are telling React
     to render on the client. We give it our Main component, and
     telling it where to render - which is the #app element in
     public/index.html created earlier.
     #+BEGIN_SRC js
       // app/components/Main.js
       var React = require('react');
       var ReactDOM = require('react-dom');

       var Main = React.createClass({
           render: function() {
               return (
                   <div>
                       Hello World!
                   </div>
               )
           }
       });

       ReactDOM.render(<Main />, document.getElementById('app'));
     #+END_SRC
** Test our application
   1. Run webpack. The -w flag is short for watch, so we don't have to
      run this each time we change our file.
      #+BEGIN_SRC sh
      ./node_modules/.bin/webpack -w
      #+END_SRC
   2. Open up public/index.html and you should see Hello World!
* Basic Routing with React Router
** Updating Our Components
  1. Create a new component called Home. It will be the component we see
     when we first start up the application. Note that we use
     className, not class, as despite the JSX, this is a JavaScript
     file, and class is a reserved word in JavaScript.
     #+BEGIN_SRC js
       // app/components/Home.js

       var React = require('react');

       var Home = React.createClass({
         render: function() {
           return (
             <h2 className="text-center">
               Search by GitHub Username
             </h2>
           );
         }
       });

       module.exports = Home;
     #+END_SRC

  2. Remove ReactDOM.render from main.js, and export the Main
     component instead. This is because we want React-Router to handle
     our routing. 
     #+BEGIN_SRC js
       // app/components/Main.js
       var React = require('react');
       
       var Main = React.createClass({
         render: function() {
           return (
             <div>
               Hello World!
             </div>
           );
         }
       });

       module.exports = Main;
     #+END_SRC
** Setting up React Router and our Routes file
  1. Install [[https://github.com/rackt/react-router][react-router]] and [[https://github.com/rackt/history][history]]. React Router keeps our UI in
     sync with the URL. History is a dependency of React Router, so
     you need both. History allows management of session history.
     #+BEGIN_SRC sh
     npm install --save react-router@1.0.1 history@1.13.1
     #+END_SRC

  2. Create a config folder within our app folder, where we will put
     our routes.js file. This file gives instructions to our
     router. Given a certain path, the router will render the
     appropriate component. We require all the components we have
     built so far. We also require our Router. The Router has a Route
     property as well that we will be using. 
     #+BEGIN_SRC js
       // app/config/routes.js

       var React = require('react');
       var Main = require('../components/Main');
       var Home = require('../components/Home');
       var Router = require('react-router');
       var Route = Router.Route;
     #+END_SRC

  3. Export our root path- these are the instructions for our
     router. React Router allows us to write our routes with
     JSX. Whenever someone goes to the root component of our 
     application, it will render our Main component (which says Hello
     World!).
     #+BEGIN_SRC js
       // app/config/routes.js

       var React = require('react');
       var Main = require('../components/Main');
       var Home = require('../components/Home');
       var Router = require('react-router');
       var Route = Router.Route;

       module.exports = (
         <Route path="/" component={ Main }></Route>
       );     
     #+END_SRC

  4. Require the IndexRoute from Router. IndexRoute allows us to give
     a default path. It is a child route of the root route - every
     time we visit the root path, the Home component will be rendered.

      #+BEGIN_SRC js
        // app/config/routes.js

         var React = require('react');
         var Main = require('../components/Main');
         var Home = require('../components/Home');
         var Router = require('react-router');
         var Route = Router.Route;
         var IndexRoute = Router.IndexRoute;

         module.exports = (
           <Route path="/" component={ Main }>
             <IndexRoute component={ Home } />
           </Route>
         ); 
      #+END_SRC

** The App Entry Point
  1. Create the App file. This will be in charge of our rendering, so
     we need ReactDOM, as well as React Router and the routes file we
     created.
     #+BEGIN_SRC js
     // app/App.js
     var React = require('react');
     var ReactDOM = require('react-dom');
     var Router = require('react-router').Router;
     var routes = require('./config/routes');
     #+END_SRC

  2. Like how we initially used ReactDOM for rendering to our page in
     the Main component, implement the rendering in our App.js
     file. This time, however, we will be passing in the Router
     component, not the main component. Within the Router, we are
     telling it to use our routes configuration.
     #+BEGIN_SRC js
     // app/App.js
     var React = require('react');
     var ReactDOM = require('react-dom');
     var Router = require('react-router').Router;
     var routes = require('./config/routes');

     ReactDOM.render(
       <Router>{ routes }</Router>,
       document.getElementById('app')
     );
     #+END_SRC

  3. Update the webpack.config.js file. We need to change the entry
     point, as it is no longer ./app/components/Main.js, but
     app/App.js.
     #+BEGIN_SRC js
       // webpack.config.js

       module.exports = {
         entry: "./app/App.js",
         output: {
           filename: "public/bundle.js"
         },
         module: {
           loaders: [
             {
               test: /\.jsx?$/,
               exclude: /(node_modules|bower_components)/,
               loader: 'babel',
               query: {
                 presets: [
                   'react', 
                   'es2015'
                 ]
               }
             }
           ]
         }
       }

     #+END_SRC

  4. Navigate to public/index.html (after running webpack, if you
     stopped it before!) and you should see... the same thing as before.
     #+BEGIN_SRC sh
     ./node_modules/.bin/webpack -w
     #+END_SRC

** Use Our Router
  1. Let's add a menu bar to our Main component.
     #+BEGIN_SRC js
       // app/components/Main.js

       var React = require('react');

       var Main = React.createClass({
         render: function() {
           return (
             <div className="main-container">
               <nav className="navbar navbar-default" 
                    role="navigation">
                 <div className="col-sm-7 col-sm-offset-2" 
                      style={{ marginTop: 15 }}>
                    MENU
                 </div>
               </nav>
               <div className="container">
                 Hello World!
               </div>
             </div>
           );
         }
       });

       module.exports = Main;
     #+END_SRC

  2. Here is where React Router comes in handy. Replace Hello World!
     with this.props.children. this.props.children will be replaced
     with whatever the active component of the Router is. So, our
     Router will render this Main component, but within it, we are also
     getting it to render something else inside it - so far, our
     routes.js file is telling it to render our Home component, so
     you'll see 'Search By GitHub Username Above'. 
     #+BEGIN_SRC js
       // app/components/Main.js

       var React = require('react');

       var Main = React.createClass({
         render: function() {
           return (
             <div className="main-container">
               <nav className="navbar navbar-default" 
                    role="navigation">
                 <div className="col-sm-7 col-sm-offset-2" 
                      style={{ marginTop: 15 }}>
                    MENU
                 </div>
               </nav>
               <div className="container">
                 { this.props.children }
               </div>
             </div>
           );
         }
       });

       module.exports = Main;      
     #+END_SRC

  4. Let's test it out! You should see a menu bar and 'Search by
     GitHub Username' when you navigate to public/index.html.
* State, Props, and Thinking in React
** Profile Component
  1. Create the Profile component. We are just giving it static text
     for the moment.
     #+BEGIN_SRC js
     // app/components/Profile.js
     var React = require('react');
     
     var Profile = React.createClass({
       render: function() {
         return (
           <div className="row">
             <div className="col-md-4">
               User Profile Component
             </div>
             <div className="col-md-4">
               Repos Component
             </div>
             <div className="col-md-4">
               Notes Component
             </div>
           </div>
         );
       }
     });

     module.exports = Profile;
     #+END_SRC

  2. Add the [[https://facebook.github.io/react/docs/component-specs.html#getinitialstate][getInitialState]] method. It returns an object. This is
     invoked once, before the component is rendered. This sets the
     initial state of the component, obviously. Usually, we initialise
     with empty data. Eventually, this data will be populated.
     #+BEGIN_SRC js
     // app/components/Profile.js
     var React = require('react');
     
     var Profile = React.createClass({
       getInitialState: function() {
         return {
           notes: [],
           bio: {},
           repos: []
         };
       },
       render: function() {
         return (
           <div className="row">
             <div className="col-md-4">
               User Profile Component
             </div>
             <div className="col-md-4">
               Repos Component
             </div>
             <div className="col-md-4">
               Notes Component
             </div>
           </div>
         );
       }
     });

     module.exports = Profile;
     #+END_SRC

  3. Add our new Profile component to our Route
     configuration. Whenever someone visits profile/random-username, we will
     render the Profile component. 
     #+BEGIN_SRC js
       // app/config/routes.js

       var React = require('react');
       var Main = require('../components/Main');
       var Home = require('../components/Home');
       var Profile = require('../components/Profile');
       var Router = require('react-router');
       var Route = Router.Route;
       var IndexRoute = Router.IndexRoute;

       module.exports = (
         <Route path="/" component={ Main }>
           <Route path="profile/:username" component={ Profile } />
           <IndexRoute component={ Home } />
         </Route>
       ); 

     #+END_SRC

  4. Test it out by visiting the page and adding /profile/jessicace
     (or whatever) after the generated hash (it's used by React
     Router). You should see 'User Profile Component', 'Repos
     Component' and 'Notes Component' rendered instead of the heading.

** Props
   1. Access the username from the URL inside our Profile component.
      Through props, we can access data in our parent. This is how
      React Router works. We want to get the username from our URL. If
      you console.log this.props, you will see that props is an
      object. One of the object's properties is params, which in turn
      is an object where we can get the username value from.
      #+BEGIN_SRC js
        // app/components/Profile.js
        var React = require('react');

        var Profile = React.createClass({
          getInitialState: function() {
            return {
              notes: [],
              bio: {},
              repos: []
            };
          },
          render: function() {
            return (
              <div className="row">
                <div className="col-md-4">
                  User Profile Component --> { this.props.params.username }
                </div>
                <div className="col-md-4">
                  Repos Component
                </div>
                <div className="col-md-4">
                  Notes Component
                </div>
              </div>
            );
          }
        });

        module.exports = Profile;      
      #+END_SRC

** GitHub UserProfile Component
   1. Create a UserProfile.js file inside a new folder called GitHub, which
      will be inside our components folder.
      #+BEGIN_SRC js
      // app/components/GitHub/UserProfile.js

      var React = require('react');

      var UserProfile = React.createClass({
        render: function() {
          return (
            <div>I am a UserProfile!</div>
          );
        }
      });

      module.exports = UserProfile;
      #+END_SRC

   2. Change our Profile component to use our newly created Repos
      component. 
      #+BEGIN_SRC js
        // app/components/Profile.js
        var React = require('react');
        var UserProfile = require('./GitHub/UserProfile');

        var Profile = React.createClass({
          getInitialState: function() {
            return {
              notes: [],
              bio: {},
              repos: []
            };
          },
          render: function() {
            return (
              <div className="row">
                <div className="col-md-4">
                  <UserProfile />
                </div>
                <div className="col-md-4">
                  Repos Component
                </div>
                <div className="col-md-4">
                  Notes Component
                </div>
              </div>
            );
          }
        });

        module.exports = Profile;       
      #+END_SRC

   3. We do not want to simply render our Profile component,
      however. That's not very useful. We want to pass in data. We can
      pass in the username like we did earlier, and we can also pass
      in whatever is relevant from our initial state- in this case,
      the bio. Add some dummy data to our bio to test it out after this.
      #+BEGIN_SRC js
        // app/components/Profile.js
        var React = require('react');
        var UserProfile = require('./GitHub/UserProfile');

        var Profile = React.createClass({
          getInitialState: function() {
            return {
              notes: [],
              bio: {
                name: 'Jessica'
              },
              repos: []
            };
          },
          render: function() {
            return (
              <div className="row">
                <div className="col-md-4">
                  <UserProfile username={ this.props.params.username }
                               bio={ this.state.bio }
                  />
                </div>
                <div className="col-md-4">
                  Repos Component
                </div>
                <div className="col-md-4">
                  Notes Component
                </div>
              </div>
            );
          }
        });

        module.exports = Profile; 
      
      #+END_SRC

   4. Update the UserProfile component, otherwise nothing will change
      in the UI if we aren't accessing the props. Once we access the
      props passed to it, we can make our component dynamic.
      #+BEGIN_SRC js
      // app/components/GitHub/UserProfile.js

      var React = require('react');

      var UserProfile = React.createClass({
        render: function() {
          return (
            <section>
              <h2>User Profile</h2>
              <dl>
                <dt>Username</dt> 
                <dd>{ this.props.username }</dd>
                <dt>Bio</dt>
                <dd>{ this.props.bio.name }</dd>
              </dl>
            </section>
          );
        }
      });
      
      module.exports = UserProfile;
      #+END_SRC

** GitHub Repos Component
   1. We are doing the same thing as before, except with a Repos
      component. Create a Repos.js file inside the GitHub folder. We
      access the repos via props.
      #+BEGIN_SRC js
        // app/components/GitHub/Repos.js

        var React = require('react');

        var Repos = React.createClass({
          render: function() {
            return (
              <section>
                <h2>Repos for { this.props.username }</h2>
                <dl>
                  <dt>Repos</dt>
                  <dd>{ this.props.repos }</dd>
                </dl>
              </section>
            );
          }
        });

        module.exports = Repos;
      #+END_SRC

   2. Update Profile.js to use our new Repos component. Pass in the
      repos state to our Repos component, adding in some dummy data in
      initialisation. 
      #+BEGIN_SRC js
        // app/components/Profile.js

        var React = require('react');
        var Repos = require('./GitHub/Repos');
        var UserProfile = require('./GitHub/UserProfile');

        var Profile = React.createClass({
          getInitialState: function() {
            return {
              notes: [],
                bio: {
                  name: 'Jessica'
                },
                repos: [
                  'Cool Repo 1',
                  'Cool Repo 2'
                ]
              };
            },
            render: function() {
              return (
                <div className="row">
                  <div className="col-md-4">
                    <UserProfile username={ this.props.params.username }
                                 bio={ this.state.bio }
                    />
                  </div>
                  <div className="col-md-4">
                    <Repos username={ this.props.params.username }
                           repos={ this.state.repos } 
                    />
                  </div>
                  <div className="col-md-4">
                    Notes Component
                  </div>
                </div>
              );
            }
        });

        module.exports = Profile; 
      #+END_SRC

** Notes Component
   1. Create our Notes component. Create a Notes.js file inside a new
      folder called Notes. Like before, access notes via props.
      #+BEGIN_SRC js
        // app/components/Notes/Notes.js

        var React = require('react');

        var Notes = React.createClass({
          render: function() {
            return (
              <section>
                <h2>Notes for { this.props.username }</h2>
                <dl>
                  <dt>Notes</dt>
                  <dd>{ this.props.notes }</dd>
                </dl>
              </section>
            );
          }
        });

        module.exports = Notes;
      #+END_SRC

   2. Update Profile.js to use our new Notes component. Pass in the
      notes state to our notes component, as well as the username. For
      the moment, add in some dummy data in getInitialState. 
      #+BEGIN_SRC js
        // app/components/Profile.js

        var React = require('react');
        var Notes = require('./Notes/Notes');
        var Repos = require('./GitHub/Repos');
        var UserProfile = require('./GitHub/UserProfile');

        var Profile = React.createClass({
          getInitialState: function() {
            return {
              notes: [
                'Cool Note 1',
                'Cool Note 2'
              ],
              bio: {
                name: 'Jessica'
              },
              repos: [
                'Cool Repo 1',
                'Cool Repo 2'
              ]
            };
          },
          render: function() {
            return (
              <div className="row">
                <div className="col-md-4">
                  <UserProfile username={ this.props.params.username }
                               bio={ this.state.bio }
                  />
                </div>
                <div className="col-md-4">
                  <Repos username={ this.props.params.username }
                         repos={ this.state.repos } 
                  />
                </div>
                <div className="col-md-4">
                  <Notes username={ this.props.params.username }
                         notes={ this.state.notes } 
                  />
                </div>
              </div>
            );
          }
        });

        module.exports = Profile; 
      #+END_SRC

   3. Test it out!
* Using ReactFire to add Data Persistence
** Dependencies
  1. Install [[https://github.com/firebase/ReactFire][ReactFire]]. We use this to populate the state of our React
     components. It integrates with [[https://www.firebase.com/][Firebase]]. Our component state can
     be bound to a Firebase endpoint, so whenever the endpoint
     changes, our state is updated.
     #+BEGIN_SRC sh
     npm install --save reactfire@0.5.1
     #+END_SRC

  2. Install Firebase.
     #+BEGIN_SRC sh
     npm install --save firebase@2.3.2
     #+END_SRC

** Add the ReactFire Mixin
  1. Add the ReactFireMixin to Profile.js. We will use ReactFire as a
     Mixin. To do this, give our React class a Mixin property, where
     its value will be an array with ReactFireMixin. 
     #+BEGIN_SRC js
       // app/components/Profile.js

       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos } 
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes } 
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile; 
     #+END_SRC

** Implement componentDidMount
  1. Add the [[https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount][componentDidMount]] method. It is part of the lifecycle
     events of a React component. It is only invoked once, just after
     it is rendered. This is where you will perform things like AJAX
     requests, set-up Firebase listeners, etc. 
     #+BEGIN_SRC js
       // app/components/Profile.js

       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ReactFireMixin],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
          
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos } 
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes } 
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;      
     #+END_SRC

  2. Sign up and create a new project at [[https://www.firebase.com/][Firebase]] (or use the default
     one provided in your account dashboard). Warning: you will need a
     Google account. To create some seed data, click the green + next to
     the app name once you are in the Dashboard for your App, type in
     a key, and add a value - E.g. I added `jessicace` as a key with
     `[ "Cool note 1", "Cool note 2" ]` as the value.

  3. Require Firebase and create a new instance of Firebase in
     componentDidMount. This will return an object that we assign to
     this.ref.
     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos } 
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes } 
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;      
     #+END_SRC

  4. Add a childRef by accessing the Firebase ref we just created, and
     passing in the username property to its child() method. This is
     specific to Firebase - we are telling our Firebase ref to go to
     Firebase, and look for whatever value we just passed to
     child(). We're looking for a child that is equivalent to whatever
     username we searched for, i.e., the username's  specific endpoint
     in our Firebase application. Does this make any sense?
     #+BEGIN_SRC js
       // app/components/Profile.js

       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos } 
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes } 
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;     
     #+END_SRC

  5. Bind our local state to the Firebase endpoint. We can use
     this.bindAsArray() for this. We can use this.bindAsArray() as it
     was added by the ReactFireMixin. It takes two arguments:
     1) Our child reference. For us, this is the reference to a specific
        user's endpoint in Firebase that we just created.
     2) The state property that we wish to bind to. In our case, it is
        notes. 
     So when this component mounts, our local state of notes should be
     consistent with the state in Firebase. Whenever the endpoint
     changes, our local state is updated as well.
     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
           this.bindAsArray(childRef, 'notes');
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos } 
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes }
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;    
     #+END_SRC

** Implement componentWillUnmount
  1. Add the [[https://facebook.github.io/react/docs/component-specs.html#unmounting-componentwillunmount][componentWillUnmount]] method. This is invoked just before
     the component is unmounted from the DOM. You use this for
     housekeeping - get rid of timers for AJAX calls, et
     cetera.
     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
           this.bindAsArray(childRef, 'notes');
         },
         componentWillUnmount: function() {

         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos }
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes }
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;    
     #+END_SRC

  2. Use componentWillUnmount() to tell the component to unbind the
     state property 'notes' from our Firebase endpoint. Whenever our
     component is unmounted, we call the unbind method on our
     ReactFire instance, so it doesn't keep trying to update
     something that doesn't exist. 
    #+BEGIN_SRC js
      // app/components/Profile.js

      var Firebase = require('Firebase');
      var React = require('react');
      var ReactFireMixin = require('reactfire');
      var Notes = require('./Notes/Notes');
      var Repos = require('./GitHub/Repos');
      var UserProfile = require('./GitHub/UserProfile');

      var Profile = React.createClass({
        mixins: [ ReactFireMixin ],
        getInitialState: function() {
          return {
            notes: [
              'Cool Note 1',
              'Cool Note 2'
            ],
            bio: {
              name: 'Jessica'
            },
            repos: [
              'Cool Repo 1',
              'Cool Repo 2'
            ]
          };
        },
        componentDidMount: function() {
          this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
          var childRef = this.ref.child(this.props.params.username);
          this.bindAsArray(childRef, 'notes');
        },
        componentWillUnmount: function() {
          this.unbind('notes');
        },
        render: function() {
          return (
            <div className="row">
              <div className="col-md-4">
                <UserProfile username={ this.props.params.username }
                             bio={ this.state.bio }
                />
              </div>
              <div className="col-md-4">
                <Repos username={ this.props.params.username }
                       repos={ this.state.repos }
                />
              </div>
              <div className="col-md-4">
                <Notes username={ this.props.params.username }
                       notes={ this.state.notes }
                />
              </div>
            </div>
          );
        }
      });

      module.exports = Profile;    
    #+END_SRC      

** Create the NotesList Component
  1. Create a NotesList component - let the Notes component be a
     container, while NotesList can focus on creating the list
     itself. For now, it can just render an empty unordered list.
     #+BEGIN_SRC js
     // app/components/Notes/NotesList.js

     var React = require('react');
      
     var NotesList = React.createClass({
       render: function() {
         return (
           <ul className="list-group">
              
           </ul>
         );
       }
     });

     module.exports = NotesList;
     #+END_SRC

  2. Create our list items using [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map?redirectlocale=en-US&redirectslug=JavaScript%252FReference%252FGlobal_Objects%252FArray%252Fmap][Array.prototype.map()]]. This uses one
     array to generate a new Array. To use map, we pass in a callback
     function and up to three arguments - the current element being
     processed in the Array, the index item of the current element,
     the array object we have called map upon. We don't need the
     original array, so our callback will only pass in the first two
     arguments, the note item and its index. This is necessary as
     React doesn't know how to render the data Firebase has provided.
     #+BEGIN_SRC js
     // app/components/Notes/NotesList.js

     var React = require('react');
      
     var NotesList = React.createClass({
       render: function() {
         var notes = this.props.notes.map(function(note, index) {
          
         });
         return (
           <ul className="list-group">
             { notes }
           </ul>
         );
       }
     });

     module.exports = NotesList;
     #+END_SRC

  3. Return the list item with our note. The inner text of our list
     item is the note itself - this is necessary due to the way
     Firebase returns data to us. We have used the array index as our
     list item key. A key is used by React for uniquely identifying
     each child of a component. See [[https://facebook.github.io/react/docs/multiple-components.html#dynamic-children][Dynamic Children]] in the React
     documentation for more information.
     #+BEGIN_SRC js
     // app/components/Notes/NotesList.js

     var React = require('react');
      
     var NotesList = React.createClass({
       render: function() {
         var notes = this.props.notes.map(function(note, index) {
           return (
             <li className="list-group-item" key={ index }>
               { note['.value'] }
             </li>
           );
         });
         return (
           <ul className="list-group">
             { notes }
           </ul>
         );
       }
     });

     module.exports = NotesList;      
     #+END_SRC

** Update the Notes Component to use NotesList
  1. Update our Notes component to use our new NotesList component.
     #+BEGIN_SRC js
       // app/components/Notes/Notes.js

       var React = require('react');
       var NotesList = require('./NotesList');

       var Notes = React.createClass({
         render: function() {
           return (
             <section>
               <h2>Notes for { this.props.username }</h2>
               <NotesList notes={ this.props.notes } />
             </section>
           );
         }
       });

       module.exports = Notes;
     #+END_SRC

  2. Give it a test! Add some data to Firebase if you haven't yet~
* Component Validation with PropTypes
  1. Add propTypes to the Repos component. We add a propTypes object
     to our component to ensure properties passed to our component are
     of a certain type, or are required. Part of making [[https://facebook.github.io/react/docs/reusable-components.html][reusable
     components]] is ensuring that we validate props so that we do not
     accidentally break components. Note that propTypes are only
     checked in development mode, for performance reasons.
     #+BEGIN_SRC js
       // app/components/GitHub/Repos.js

       var React = require('react');

       var Repos = React.createClass({
         propTypes: {
         
         },
         render: function() {
           return (
             <section>
               <h2>Repos</h2>
               <dl>
                 <dt>Repos</dt>
                 <dd>{ this.props.repos }</dd>
               </dl>
             </section>
           );
         }
       });

       module.exports = Repos;

     #+END_SRC

  2. Fill in propTypes by using [[https://facebook.github.io/react/docs/top-level-api.html#react.proptypes][React.PropTypes]]. React.PropTypes
     includes types for validation, to be used by your propTypes
     object. The username should be a string, and the repos should be
     an array. If you do not pass in the correct props, you will get
     an error in the JavaScript console, which is useful in
     debugging. If we dropped 'isRequired', that means that the prop
     is optional. 
     #+BEGIN_SRC js
       // app/components/GitHub/Repos.js

       var React = require('react');

       var Repos = React.createClass({
         propTypes: {
           username: React.PropTypes.string.isRequired,
           repos: React.PropTypes.array.isRequired
         },
         render: function() {
           return (
             <section>
               <h2>Repos</h2>
               <dl>
                 <dt>Repos</dt>
                 <dd>{ this.props.repos }</dd>
               </dl>
             </section>
           );
         }
       });

       module.exports = Repos;

     #+END_SRC

     - Here's an example of validations you can perform, taken from
       the React documentation ([[https://facebook.github.io/react/docs/reusable-components.html][reusable components]]).
       #+BEGIN_SRC js
         React.createClass({
           propTypes: {
             // You can declare that a prop is a specific JS primitive. By default, these
             // are all optional.
             optionalArray: React.PropTypes.array,
             optionalBool: React.PropTypes.bool,
             optionalFunc: React.PropTypes.func,
             optionalNumber: React.PropTypes.number,
             optionalObject: React.PropTypes.object,
             optionalString: React.PropTypes.string,

             // Anything that can be rendered: numbers, strings, elements or an array
             // (or fragment) containing these types.
             optionalNode: React.PropTypes.node,

             // A React element.
             optionalElement: React.PropTypes.element,

             // You can also declare that a prop is an instance of a class. This uses
             // JS's instanceof operator.
             optionalMessage: React.PropTypes.instanceOf(Message),

             // You can ensure that your prop is limited to specific values by treating
             // it as an enum.
             optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),

             // An object that could be one of many types
             optionalUnion: React.PropTypes.oneOfType([
               React.PropTypes.string,
               React.PropTypes.number,
               React.PropTypes.instanceOf(Message)
             ]),

             // An array of a certain type
             optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),

             // An object with property values of a certain type
             optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),

             // An object taking on a particular shape
             optionalObjectWithShape: React.PropTypes.shape({
               color: React.PropTypes.string,
               fontSize: React.PropTypes.number
             }),

             // You can chain any of the above with `isRequired` to make sure a warning
             // is shown if the prop isn't provided.
             requiredFunc: React.PropTypes.func.isRequired,

             // A value of any data type
             requiredAny: React.PropTypes.any.isRequired,

             // You can also specify a custom validator. It should return an Error
             // object if the validation fails. Don't `console.warn` or throw, as this
             // won't work inside `oneOfType`.
             customProp: function(props, propName, componentName) {
               if (!/matchme/.test(props[propName])) {
                 return new Error('Validation failed!');
               }
             }
           },
           /* ... */
         });
       #+END_SRC

  3. Add propTypes to our UserProfile component as well. Username
     is a required string, and bio is a required object.
     #+BEGIN_SRC js
       // app/components/GitHub/UserProfile.js

       var React = require('react');

       var UserProfile = React.createClass({
         propTypes: {
           username: React.PropTypes.string.isRequired,
           bio: React.PropTypes.object.isRequired
         },
         render: function() {
           return (
             <section>
               <h2>User Profile</h2>
               <dl>
                 <dt>Username</dt> 
                 <dd>{ this.props.username }</dd>
                 <dt>Bio</dt>
                 <dd>{ this.props.bio.name }</dd>
               </dl>
             </section>
           );
         }
       });

       module.exports = UserProfile;
     #+END_SRC

  4. Add propTypes to our Notes component. The username is a required
     string, and notes is a required array.
     #+BEGIN_SRC js
       // app/components/Notes/Notes.js

       var React = require('react');
       var NotesList = require('./NotesList');

       var Notes = React.createClass({
         propTypes: {
           username: React.PropTypes.string.isRequired,
           notes: React.PropTypes.array.isRequired
         },
         render: function() {
           return (
             <section>
               <h2>Notes for { this.props.username }</h2>
               <NotesList notes={ this.props.notes } />
             </section>
           );
         }
       });

       module.exports = Notes;

     #+END_SRC

  5. Test that everything is working. You can try altering/removing
     some of the props passed in by the Profile component, and
     ensuring that you get errors.
* Managing State in Child Components

  1. Add a handleAddnote function to our Profile component. It will
     take one argument, the newNote we wish to add to the user. We
     want to manipulate state where it lives - and our Notes component
     lives in the Profile component. So, we declare the function here
     and pass it down to the relevant child component, where it will
     eventually be invoked. 

     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
           this.bindAsArray(childRef, 'notes');
         },
         componentWillUnmount: function() {
           this.unbind('notes');
         },
         handleAddNote: function(newNote) {
           
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos }
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes }
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;

     #+END_SRC

  2. Update the Firebase endpoint with new data. The first child finds
     the relevant user. The second child is the length of the array,
     so when we set() data, a new note is appended to the end of an
     array. Because we have bound our note state to our childref, when
     we update our endpoint, these updates are pushed to our
     state. When this happens the component will re-render. Firebase
     also has a push() method, but this generates its own key.
     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
           this.bindAsArray(childRef, 'notes');
         },
         componentWillUnmount: function() {
           this.unbind('notes');
         },
         handleAddNote: function(newNote) {
           this.ref
               .child(this.props.params.username)
               .child(this.state.notes.length)
               .set(newNote);
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos }
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes }
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;

     #+END_SRC

  3. Pass in handleAddNote as a prop to our Notes component. 
     #+BEGIN_SRC js
       // app/components/Profile.js

       var Firebase = require('Firebase');
       var React = require('react');
       var ReactFireMixin = require('reactfire');
       var Notes = require('./Notes/Notes');
       var Repos = require('./GitHub/Repos');
       var UserProfile = require('./GitHub/UserProfile');

       var Profile = React.createClass({
         mixins: [ ReactFireMixin ],
         getInitialState: function() {
           return {
             notes: [
               'Cool Note 1',
               'Cool Note 2'
             ],
             bio: {
               name: 'Jessica'
             },
             repos: [
               'Cool Repo 1',
               'Cool Repo 2'
             ]
           };
         },
         componentDidMount: function() {
           this.ref = new Firebase('https://react-github-notetaker.firebaseio.com/');
           var childRef = this.ref.child(this.props.params.username);
           this.bindAsArray(childRef, 'notes');
         },
         componentWillUnmount: function() {
           this.unbind('notes');
         },
         handleAddNote: function(newNote) {
           // Update firebase with the newNote.
           this.ref
               .child(this.props.params.username)
               .child(this.state.notes.length)
               .set(newNote);
         },
         render: function() {
           return (
             <div className="row">
               <div className="col-md-4">
                 <UserProfile username={ this.props.params.username }
                              bio={ this.state.bio }
                 />
               </div>
               <div className="col-md-4">
                 <Repos username={ this.props.params.username }
                        repos={ this.state.repos }
                 />
               </div>
               <div className="col-md-4">
                 <Notes username={ this.props.params.username }
                        notes={ this.state.notes }
                        addNote={ this.handleAddNote }
                 />
               </div>
             </div>
           );
         }
       });

       module.exports = Profile;

     #+END_SRC

  4. Add a new propType to our Notes component to deal with
     addNote. addNote should be a function (specified with
     React.PropTypes.func) and is also required.
     #+BEGIN_SRC js
       // app/components/Notes/Notes.js

       var React = require('react');
       var NotesList = require('./NotesList');

       var Notes = React.createClass({
         propTypes: {
           username: React.PropTypes.string.isRequired,
           notes: React.PropTypes.array.isRequired,
           addNote: React.PropTypes.func.isRequired
         },
         render: function() {
           return (
             <section>
               <h2>Notes for { this.props.username }</h2>
               <NotesList notes={ this.props.notes } />
             </section>
           );
         }
       });

       module.exports = Notes;
     #+END_SRC

  5. Create an AddNote component to our Notes folder.
     #+BEGIN_SRC js
     // app/components/Notes/AddNote.js
     var React = require('react');

     var AddNote = React.createClass({
       propTypes: {
         username: React.PropTypes.string.isRequired,
         addNote: React.PropTypes.func.isRequired
       },
       render: function() {
       
       }
     });

     module.exports = AddNote;
     #+END_SRC

  6. Specify its propTypes. Specifically, it requires a username and
     an addNote function.
     #+BEGIN_SRC js
     // app/components/Notes/AddNote.js
     var React = require('react');

     var AddNote = React.createClass({
       propTypes: {
         username: React.PropTypes.string.isRequired,
         addNote: React.PropTypes.func.isRequired
       },
       render: function() {
       
       }
     });

     module.exports = AddNote;
     #+END_SRC

  7. Add the render function. We need an input field and a button for
     submitting the note.
     #+BEGIN_SRC js
     // app/components/Notes/AddNote.js
     var React = require('react');

     var AddNote = React.createClass({
       propTypes: {
         username: React.PropTypes.string.isRequired,
         addNote: React.PropTypes.func.isRequired
       },
       render: function() {
         return (
           <div className="input-group">
             <label>
               Add New Note
               <input type="text" 
                      className="form-control" 
                      placeholder={ `${this.props.username} is super cool` } 
               />
             </label>
           </div>
         );
       }
     });

     module.exports = AddNote;
     #+END_SRC

  8. Add a setRef function to the AddNote component, passing in a
     specific ref. We are doing this so we can get the value of our
     new note input field, which will then be passed into our addNote
     function. A ref is like a name tag so you can access it
     later. This function takes in a ref, and adds it as a property on
     our instance. We can then query the property and do whatever we
     need to do with its value. We need to get the newNote from our
     input field. 

     #+BEGIN_SRC js
     // app/components/Notes/AddNote.js
     var React = require('react');

     var AddNote = React.createClass({
       propTypes: {
         username: React.PropTypes.string.isRequired,
         addNote: React.PropTypes.func.isRequired
       },
       setRef: function(ref) {
         this.note = ref;
       },
       render: function() {
         return (
           <div className="input-group">
             <label>
               Add New Note
               <input type="text" 
                      className="form-control" 
                      placeholder={ `${this.props.username} is super cool` } 
               />
             </label>
           </div>
         );
       }
     });

     module.exports = AddNote;
     #+END_SRC

  9. Add the ref attribute to our input, passing in the setRef
     function. 
     #+BEGIN_SRC js
     // app/components/Notes/AddNote.js
     var React = require('react');

     var AddNote = React.createClass({
       propTypes: {
         username: React.PropTypes.string.isRequired,
         addNote: React.PropTypes.func.isRequired
       },
       setRef: function(ref) {
         this.note = ref;
       },
       render: function() {
         return (
           <div className="input-group">
             <label>
               Add New Note
               <input type="text" 
                      className="form-control" 
                      placeholder={ `${this.props.username} is super cool` } 
                      ref={ this.setRef }
               />
             </label>
           </div>
         );
       }
     });

     module.exports = AddNote;
     #+END_SRC

  10. Create a button input for the AddNote component. When someone
      clicks on our submit button, we grab the value from the input
      field, and pass it to a new function called handleSubmit.
      #+BEGIN_SRC js
      // app/components/Notes/AddNote.js
      var React = require('react');

      var AddNote = React.createClass({
        propTypes: {
          username: React.PropTypes.string.isRequired,
          addNote: React.PropTypes.func.isRequired
        },
        setRef: function(ref) {
          this.note = ref;
        },
        render: function() {
          return (
            <div className="input-group">
              <label>
                Add New Note
                <input type="text" 
                       className="form-control" 
                       placeholder={ `${this.props.username} is super cool` } 
                />
              </label>
              <span className="input-group-btn">
                <button className="btn btn-default" 
                        type="button"
                        onClick={ this.handleSubmit }>
                  Submit
                </button>
              </span>
            </div>
          );
        }
      });
     
      module.exports = AddNote;
      #+END_SRC

  11. Add a handleSubmit function. this.note is valid because of
      setRef. Once we get the value, we set the current text to ''
      (essentially resetting it). We then call the function addNote
      passed down from our Profile component with the value we
      previously got from our input. 
      #+BEGIN_SRC js
        // app/components/Notes/AddNote.js

        var React = require('react');

        var AddNote = React.createClass({
          propTypes: {
            username: React.PropTypes.string.isRequired,
            addNote: React.PropTypes.func.isRequired
          },
          handleSubmit: function() {
            var newNote = this.note.value;
            this.props.addNote(newNote);
            this.note.value = '';
          },
          setRef: function(ref) {
            this.note = ref;
          },
          render: function() {
            return (
              <div className="input-group">
                <label>
                  Add New Note
                  <input type="text" 
                         className="form-control" 
                         placeholder={ `${this.props.username} is super cool` } 
                  />
                </label>
                <span className="input-group-btn">
                  <button className="btn btn-default" 
                          type="button"
                          onClick={ this.handleSubmit }>
                    Submit
                  </button>
                </span>
              </div>
            );
          }
        });

        module.exports = AddNote;
      #+END_SRC

  12. In our Notes component, require our newly created AddNote
      component, and add it to the render function.
      #+BEGIN_SRC js
        // app/components/Notes/Notes.js

        var React = require('react');
        var AddNote = require('./AddNote');
        var NotesList = require('./NotesList');

        var Notes = React.createClass({
          propTypes: {
            username: React.PropTypes.string.isRequired,
            notes: React.PropTypes.array.isRequired,
            addNote: React.PropTypes.func.isRequired
          },
          render: function() {
            return (
              <section>
                <h2>Notes for { this.props.username }</h2>
                <AddNote username={ this.props.username }
                         addNote={ this.props.addNote }
                />
                <NotesList notes={ this.props.notes } />
              </section>
            );
          }
        });

        module.exports = Notes;

      #+END_SRC
* Transitions with React Router
  1. Create a new component called SearchGitHub.js. We require the
     router to implement transitions between our routes. 
     #+BEGIN_SRC js
     // app/components/SearchGitHub.js
     
     var React = require('react');
     var Router = require('react-router');

     var SearchGitHub = React.createClass({
       
     });

     module.exports = SearchGitHub;
     #+END_SRC

  2. Add Mixins for our transition. We will use the history property
     on the router.
     #+BEGIN_SRC js
     // app/components/SearchGitHub.js

     var React = require('react');
     var Router = require('react-router');

     var SearchGitHub = React.createClass({
       mixins: [ Router.History ],
     });

     module.exports = SearchGitHub;
     #+END_SRC

  3. Implement the render function. 
     #+BEGIN_SRC js
     // app/components/SearchGitHub.js

     var React = require('react');
     var Router = require('react-router');

     var SearchGitHub = React.createClass({
       mixins: [ Router.History ],
       render: function() {
         return (
           <div className="col-sm-12">
             <form onSubmit={ this.handleSubmit }>
               <div className="form-group col-sm-7">
                 <input type="text" className="form-control" ref={ this.getRef } />
               </div>
             </form>
           </div>
         );
       }
     });

     module.exports = SearchGitHub;
     #+END_SRC

  4. Implement setRef.
     #+BEGIN_SRC js
     // app/components/SearchGitHub.js

     var React = require('react');
     var Router = require('react-router');

     var SearchGitHub = React.createClass({
       mixins: [ Router.History ],
       setRef: function(ref) {
         this.usernameRef = ref;
       },
       render: function() {
         return (
           <div className="col-sm-12">
             <form onSubmit={ this.handleSubmit }>
               <div className="form-group col-sm-7">
                 <input type="text" className="form-control" ref={ this.setRef } />
               </div>
               <div className="form-group col-sm-5">
                 <button type="submit" className="btn btn-block btn-primary">
                   Search GitHub
                 </button>
               </div>
             </form>
           </div>
         );
       }
     });

     module.exports = SearchGitHub;
     #+END_SRC

  5. Create a handleSubmit function. It gets the value of our username
     ref. 
     #+BEGIN_SRC js
     // app/components/SearchGitHub.js

     var React = require('react');
     var Router = require('react-router');

     var SearchGitHub = React.createClass({
       mixins: [ Router.History ],
       setRef: function(ref) {
         this.usernameRef = ref;
       },
       handleSubmit: function() {
         var username = this.usernameRef.value;
         this.usernameRef.value = '';
       },
       render: function() {
         return (
           <div className="col-sm-12">
             <form onSubmit={ this.handleSubmit }>
               <div className="form-group col-sm-7">
                 <input type="text" className="form-control" ref={ this.setRef } />
               </div>
               <div className="form-group col-sm-5">
                 <button type="submit" className="btn btn-block btn-primary">
                   Search GitHub
                 </button>
               </div>
             </form>
           </div>
         );
       }
     });

     module.exports = SearchGitHub;
     #+END_SRC

  6. As we are using a mixin, it takes any properties from the History
     module and adding it to our instance. One of these properties is
     history, which has a function called
     pushState();. history.pushState() allows us to transition to a
     new route. We wish to transition to the profile/:username route.
     #+BEGIN_SRC js
       // app/components/SearchGitHub.js

       var React = require('react');
       var Router = require('react-router');

       var SearchGitHub = React.createClass({
         mixins: [ Router.History ],
         setRef: function(ref) {
           this.usernameRef = ref;
         },
         handleSubmit: function() {
           var username = this.usernameRef.value;
           this.usernameRef.value = '';
           this.history.pushState(null, "profile/" + username);
         },
         render: function() {
           return (
             <div className="col-sm-12">
               <form onSubmit={ this.handleSubmit }>
                 <div className="form-group col-sm-7">
                   <input type="text" className="form-control" ref={ this.setRef } />
                 </div>
                 <div className="form-group col-sm-5">
                   <button type="submit" className="btn btn-block btn-primary">
                     Search GitHub
                   </button>
                 </div>
               </form>
             </div>
           );
         }
       });

       module.exports = SearchGitHub;     
     #+END_SRC

  7. Over in our Main component, replace the static Menu text with our
     SearchGitHub component.
     #+BEGIN_SRC js
       // app/components/Main.js

       var React = require('react');
       var SearchGitHub = require('./SearchGitHub');

       var Main = React.createClass({
         render: function() {
           return (
             <div className="main-container">
               <nav className="navbar navbar-default" 
                    role="navigation">
                 <div className="col-sm-7 col-sm-offset-2" 
                      style={{ marginTop: 15 }}>
                    <SearchGitHub />
                 </div>
               </nav>
               <div className="container">
                 { this.props.children }
               </div>
             </div>
           );
         }
       });

       module.exports = Main;     
     #+END_SRC
